trigger:
  batch: true
  branches:
    exclude:
      - master
      - develop
      - gh-pages
  paths:
    exclude:
      - docs/*
      - "**/*.md"
      - .travis.yml

variables:
  buildConfiguration: Release
  vm: ubuntu-18.04
  sdkVersion: 3.1.100
  projectPath: src/FooLib/FooLib.csproj
  internalFeedName: testrepo/FooLib
  ciBuildVersion: ci.$(Build.BuildId)+git.commit.$(Build.SourceVersion)
  unitTestsPackage: $(Build.SourcesDirectory)/src/test/FooLibTests/FooLibTests.csproj

stages:
  - stage: Build
    displayName: ðŸš§ Build
    jobs:
      - job: Build
        displayName: Build with .NET Core SDK
        pool:
          vmImage: $(vm)
        steps:

          - task: UseDotNet@2
            displayName: Install .NET Core 3.1 SDK
            inputs:
              version: $(sdkVersion)
              packageType: sdk

          - script: dotnet help
            displayName: Initialize .NET Core Environment

          - task: DotNetCoreCLI@2
            displayName: Build Package
            inputs:
              command: build
              projects: $(projectPath)
              arguments: >
                --configuration $(buildConfiguration)
                --version-suffix "$(ciBuildVersion)"

          # DotNetCoreCLI@2 with pack ignores arguments input, resorting to bash here.
          # TODO replace with DotNetCoreCLI task when it's fixed
          # Currently creating a package with semver 2.0 gives a warning about older
          # clients, that's fine. It can't be disabled without disabling all package analysing
          # during pack so we can just ignore it.
          - bash: >
              dotnet pack
              --no-build
              --output "$(Build.ArtifactStagingDirectory)/packages/ci"
              --configuration $(buildConfiguration)
              --version-suffix "$(ciBuildVersion)"
              $(projectPath)
            displayName: Pack CI Package

          - publish: $(Build.ArtifactStagingDirectory)/packages
            artifact: packages

  - stage: PublishArtifacts
    dependsOn: Build
    displayName: ðŸ“¤ Publish artifacts
    # publish artifacts only for pull requests that is coming from the same repo
    condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], False))
    jobs:
      - job: PublishArtifacts
        displayName: Publish Artifacts
        pool:
          vmImage: $(vm)
        steps:

          - checkout: none

          - download: current
            artifact: packages
            # quotes are needed since * can't be used as the first character without quotes
            patterns: "*/**/*.*upkg"

          - task: UseDotNet@2
            displayName: Install .NET Core 3.1 SDK
            inputs:
              version: $(sdkVersion)
              packageType: sdk

          - script: dotnet help
            displayName: Initialize .NET Core Environment

          - task: DotNetCoreCLI@2
            displayName: Publish CI Package to Azure Artifacts
            inputs:
              command: push
              nuGetFeedType: internal
              feedPublish: $(internalFeedName)
              publishPackageMetadata: true
              packagesToPush: $(Pipeline.Workspace)/packages/ci/*.*upkg

  - stage: UnitTest
    dependsOn: PublishArtifacts
    displayName: ðŸ§ª Unit test
    condition: succeeded()
    jobs:
      - job: UnitTest
        displayName: Run Unit Tests
        pool:
          vmImage: $(vm)
        steps:

          - task: UseDotNet@2
            displayName: Install .NET Core 3.1 SDK
            inputs:
              version: $(sdkVersion)
              packageType: sdk

          - script: dotnet help
            displayName: Initialize .NET Core Environment

          - task: DotNetCoreCLI@2
            displayName: Execute Unit Tests
            inputs:
              command: test
              packages: $(unitTestsPackage)
              configuration: $(buildConfiguration)
              arguments: >
                --verbosity normal
              publishTestResults: true
